using System.Web.Mvc;
using System.Collections.Generic;
using InsideWordProvider;
using InsideWordMVCWeb.Models.Utility;
using System.Globalization;
using System;
using InsideWordMVCWeb.ViewModels.Shared;
using InsideWordMVCWeb.Models.WebProvider;
using System.Web.Configuration;
using InsideWordResource;

namespace InsideWordMVCWeb.ViewModels.ProviderViewModels
{
    public class ArticleVM
    {
        public long Id { get; set; }
        public string Title { get; set; }
        public string EditDate { get; set; }
        public bool IsPublished { get; set; }
        public bool ShowBlurb { get; set; }
        public MvcHtmlString Blurb { get; set; }
        public MvcHtmlString Text { get; set; }
        public string ViewCount { get; set; }
        public string CountComments { get; set; }
        public MemberVM Author { get; set; }
        public CurrentMemberVM CurrentMember { get; set; }
        public string ArticleVotes { get; set; }
        public string VoteStatus { get; set; }
        public string ArticleCategories { get; set; }

        public ArticleVM() { }
        public ArticleVM(ProviderArticle anArticle, ProviderCurrentMember currentMember)
        {
            Parse(anArticle, currentMember);
        }

        public bool Parse(ProviderArticle anArticle, ProviderCurrentMember currentMember)
        {
            Id = anArticle.Id.Value;
            if (!anArticle.IsPublished)
            {
                Title = "(DRAFT) " + anArticle.Title;
            }
            else
            {
                Title = anArticle.Title;
            }
            
            EditDate = InsideWordUtility.GetPrettyDate(anArticle.EditDate);
            IsPublished = anArticle.IsPublished;

            ShowBlurb = !anArticle.BlurbIsAutoGenerated;
            if (ShowBlurb)
            {
                Blurb = MvcHtmlString.Create(anArticle.Blurb);
            }
            else
            {
                Blurb = MvcHtmlString.Create("");
            }

            Text = MvcHtmlString.Create(anArticle.ParsedText);
            ViewCount = anArticle.ViewCount.ToString();
            CountComments = anArticle.CountComments.ToString();
            CurrentMember = new CurrentMemberVM(currentMember, anArticle);
            Author = new MemberVM(anArticle.Author, currentMember, anArticle);
            ArticleVotes = InsideWordUtility.FormatVotes(anArticle.CountVotes);

            if (currentMember.IsLoggedOn && ProviderArticleVote.HasVoted(anArticle.Id.Value, currentMember.Id.Value))
            {
                VoteStatus = "userVoted";
            }
            else if (!currentMember.IsLoggedOn)
            {
                VoteStatus = "loginToVote";
            }
            else
            {
                VoteStatus = String.Empty; // can vote
            }

            ArticleCategories = String.Join(", ", anArticle.CategoryNames.ToArray());

            return true;
        }
    }

    public class BlurbVM : IEquatable<BlurbVM>
    {
        public long Id { get; set; }
        public string Title { get; set; }
        public MvcHtmlString Text { get; set; }
        public string EditDate { get; set; }
        public string CountComments { get; set; }
        public MemberVM Author { get; set; }
        public ImageInfo BlurbPhoto { get; set; }
        public string ArticleVotes { get; set; }

        // TODO enum BlurbTemplate (switch on blurb template in the view)
        public BlurbVM() { }

        public BlurbVM(ProviderArticle anArticle)
        {
            Id = anArticle.Id.Value;
            Title = anArticle.Title;
            Text = MvcHtmlString.Create(anArticle.Blurb);
            EditDate = InsideWordUtility.GetPrettyDate(anArticle.EditDate);
            CountComments = anArticle.CountComments.ToString();
            ArticleVotes = InsideWordUtility.FormatVotes(anArticle.CountVotes);

            Author = null;
            ProviderMember author = anArticle.Author;
            if (author != null)
            {
                Author = new MemberVM(author, null);
            }

            BlurbPhoto = null;
            if (anArticle.HasBlurbThumbnail)
            {
                BlurbPhoto = anArticle.RandomBlurbPhoto.PhotoInfo;
            }
        }

        public bool Equals(BlurbVM aBlurb)
        {
            return Id == aBlurb.Id;
        }

        // If Equals() returns true for a pair of objects 
        // then GetHashCode() must return the same value for these objects.
        public override int GetHashCode()
        {
            return (int)Id;
        }
    }

    public class ConversationVM
    {
        public long Id { get; set; }
        public long? PageAuthorId { get; set; }
        public List<CommentVM> CommentList { get; set; }

        public ConversationVM() { }

        public ConversationVM(ProviderConversation aConversation, ProviderCurrentMember currentMember, long? pageAuthorId)
        {
            Parse(aConversation, currentMember, pageAuthorId);
        }

        public bool Parse(ProviderConversation aConversation, ProviderCurrentMember currentMember, long? pageAuthorId)
        {
            Id = aConversation.Id.Value;
            PageAuthorId = pageAuthorId;
            CommentList = CommentVM.ConvertAll(aConversation.Comments, currentMember,  pageAuthorId);
            return true;
        }
    }

    public class CommentVM
    {
        public long Id { get; set; }
        public bool IsReply { get; set; }
        public string EditDate { get; set; }
        public MvcHtmlString Text { get; set; }
        public bool IsHidden { get; set; }
        public bool PageOwns { get; set; }
        public MemberVM Author { get; set; }
        public CurrentMemberVM CurrentMember { get; set; }

        public CommentVM() { }

        public CommentVM(ProviderComment aComment, ProviderCurrentMember currentMember, long? pageAuthorId)
        {
            Id = aComment.Id.Value;
            if (aComment.IsHidden)
            {
                Text = MvcHtmlString.Create("<i>This comment has been flagged and removed.</i>");
            }
            else
            {
                Text = MvcHtmlString.Create(aComment.Text);
            }
            EditDate = InsideWordUtility.GetPrettyDate(aComment.EditDate);
            IsHidden = aComment.IsHidden;
            if (aComment.Author != null)
            {
                if (pageAuthorId.HasValue)
                {
                    PageOwns = aComment.Author.Id == pageAuthorId.Value;
                }
                else
                {
                    PageOwns = false;
                }
                Author = new MemberVM(aComment.Author, currentMember, aComment);
            }
            else
            {
                PageOwns = false;
                Author = null;
            }

            CurrentMember = new CurrentMemberVM(currentMember, aComment);
        }

        static public List<CommentVM> ConvertAll(List<ProviderComment> commentList, ProviderCurrentMember currentMember, long? pageAuthorId)
        {
            List<CommentVM> commentVMList = new List<CommentVM>();
            foreach (ProviderComment aComment in commentList)
            {
                CommentVM aCommentVM = new CommentVM(aComment, currentMember, pageAuthorId);
                aCommentVM.IsReply = true;
                commentVMList.Add(aCommentVM);
            }
            if(commentVMList.Count > 0)
            {
                commentVMList[0].IsReply = false;
            }
            return commentVMList;
        }
    }

    public class MemberVM
    {
        public string DisplayName { get; set; }
        public long? Id { get; set; }
        public bool Owns { get; set; }
        public bool IsAnonymous { get; set; }
        public bool IsActive { get; set; }
        public ImageInfo ProfileImage { get; set; }
        //public List<ProviderGroup> Groups { get; set; }

        public MemberVM() { }

        public MemberVM(ProviderMember aMember, ProviderCurrentMember currentMember) : this(aMember, currentMember, null)
        {

        }

        public MemberVM(ProviderMember aMember, ProviderCurrentMember currentMember, Provider property)
        {
            if (aMember != null)
            {
                DisplayName = IWStringUtility.TruncateClean(aMember.DisplayName, ProviderMember.UserNameSize);
                Id = aMember.Id;
                Owns = aMember.Owns(property);
                IsActive = aMember.IsActive;
                //Groups = aMember.Groups;
                IsAnonymous = aMember.IsAnonymous;
            }
            else
            {
                IsAnonymous = true;
            }

            if (aMember == null ||
                aMember.ProfilePhotoId == null ||
                (aMember.IsAnonymous && currentMember != null && !currentMember.CanEdit(aMember)))
            {
                ProfileImage = ImageLibrary.DefaultProfile;
            }
            else
            {
                ProviderPhotoRecord profileImage = (new ProviderPhotoRecord(aMember.ProfilePhotoId.Value)).Thumbnail(ProviderPhotoRecord.ImageTypeEnum.ProfileThumbnail);
                ProfileImage = profileImage.PhotoInfo;
                ProfileImage.Alt = DisplayName + " Profile Image";
            }
        }
    }

    public class CurrentMemberVM : MemberVM
    {
        public bool IsLoggedOn { get; set; }
        public bool CanEdit { get; set; }

        public CurrentMemberVM() { }

        public CurrentMemberVM(ProviderCurrentMember currentMember) : this(currentMember, null) { }

        public CurrentMemberVM(ProviderCurrentMember currentMember, Provider property) : base(currentMember, currentMember, property)
        {
            IsLoggedOn = currentMember.IsLoggedOn;
            CanEdit = currentMember.CanEdit(property);
        }
    }

    public class GroupVM
    {
        public string Name                   { get; set; }
        public CurrentMemberVM CurrentMember { get; set; }

        public GroupVM() { }

        public GroupVM(ProviderGroup aGroup, ProviderCurrentMember currentMember)
        {
            Parse(aGroup, currentMember);
        }

        public bool Parse(ProviderGroup aGroup, ProviderCurrentMember currentMember)
        {
            Name = aGroup.Name;
            CurrentMember = new CurrentMemberVM(currentMember);
            return true;
        }
    }
}
